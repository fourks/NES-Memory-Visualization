import math

nes = [
    (124,124,124),
    (0,0,252),
    (0,0,188),
    (68,40,188),
    (148,0,132),
    (168,0,32),
    (168,16,0),
    (136,20,0),
    (80,48,0),
    (0,120,0),
    (0,104,0),
    (0,88,0),
    (0,64,88),
    (0,0,0),
    (0,0,0),
    (0,0,0),
    (188,188,188),
    (0,120,248),
    (0,88,248),
    (104,68,252),
    (216,0,204),
    (228,0,88),
    (248,56,0),
    (228,92,16),
    (172,124,0),
    (0,184,0),
    (0,168,0),
    (0,168,68),
    (0,136,136),
    (0,0,0),
    (0,0,0),
    (0,0,0),
    (248,248,248),
    (60,188,252),
    (104,136,252),
    (152,120,248),
    (248,120,248),
    (248,88,152),
    (248,120,88),
    (252,160,68),
    (248,184,0),
    (184,248,24),
    (88,216,84),
    (88,248,152),
    (0,232,216),
    (120,120,120),
    (0,0,0),
    (0,0,0),
    (252,252,252),
    (164,228,252),
    (184,184,248),
    (216,184,248),
    (248,184,248),
    (248,164,192),
    (240,208,176),
    (252,224,168),
    (248,216,120),
    (216,248,120),
    (184,248,184),
    (184,248,216),
    (0,252,252),
    (216,216,216),
    (0,0,0),
    (0,0,0)
]

#http://www.firebrandx.com/nespalette.html
nes2 = [
    (106, 109, 106),
    (0, 19, 128),
    (30, 0, 138),
    (57, 0, 122),
    (85, 0, 86),
    (90, 0, 24),
    (79, 16, 0),
    (56, 33, 0),
    (33, 51, 0),
    (0, 61, 0),
    (0, 64, 0),
    (0, 57, 36),
    (0, 46, 85),
    (0, 0, 0),
    (0, 0, 0),
    (0, 0, 0),
    (185, 188, 185),
    (24, 80, 199),
    (75, 48, 227),
    (115, 34, 214),
    (149, 31, 169),
    (157, 40, 92),
    (150, 60, 0),
    (122, 81, 0),
    (91, 103, 0),
    (34, 119, 0),
    (2, 126, 2),
    (0, 118, 69),
    (0, 110, 138),
    (0, 0, 0),
    (0, 0, 0),
    (0, 0, 0),
    (255, 255, 255),
    (104, 166, 255),
    (146, 153, 255),
    (176, 133, 255),
    (217, 117, 253),
    (227, 119, 185),
    (229, 141, 104),
    (207, 162, 44),
    (179, 175, 12),
    (123, 194, 17),
    (85, 202, 71),
    (70, 203, 129),
    (71, 193, 197),
    (74, 77, 74),
    (0, 0, 0),
    (0, 0, 0),
    (255, 255, 255),
    (204, 234, 255),
    (221, 222, 255),
    (236, 218, 255),
    (248, 215, 254),
    (252, 214, 245),
    (253, 219, 207),
    (249, 231, 181),
    (241, 240, 170),
    (218, 250, 169),
    (201, 255, 188),
    (195, 251, 215),
    (196, 246, 246),
    (190, 193, 190),
    (0, 0, 0),
    (0, 0, 0)
]

# http://rgbsource.blogspot.com/2016/10/creating-accurate-nes-ntsc-color-palette.html
nes3 = [
    (100, 99, 102),
    (0, 21, 129),
    (30, 0, 144),
    (56, 0, 131),
    (86, 0, 92),
    (90, 0, 25),
    (80, 10, 0),
    (57, 29, 0),
    (31, 50, 0),
    (0, 62, 0),
    (0, 65, 0),
    (0, 58, 26),
    (0, 48, 87),
    (0, 0, 0),
    (0, 0, 0),
    (0, 0, 0),
    (175, 174, 176),
    (23, 75, 203),
    (71, 43, 231),
    (108, 27, 220),
    (151, 23, 178),
    (160, 24, 91),
    (152, 48, 0),
    (123, 73, 0),
    (91, 102, 0),
    (37, 120, 0),
    (0, 127, 0),
    (0, 121, 62),
    (0, 108, 140),
    (0, 0, 0),
    (0, 0, 0),
    (0, 0, 0),
    (255, 255, 255),
    (98, 168, 255),
    (145, 133, 255),
    (180, 116, 255),
    (226, 108, 255),
    (243, 105, 195),
    (241, 127, 100),
    (217, 149, 40),
    (187, 181, 7),
    (129, 201, 9),
    (88, 213, 63),
    (72, 208, 126),
    (76, 199, 205),
    (77, 76, 78),
    (0, 0, 0),
    (0, 0, 0),
    (255, 255, 255),
    (195, 225, 255),
    (214, 211, 255),
    (228, 203, 255),
    (248, 200, 255),
    (255, 199, 238),
    (255, 207, 199),
    (246, 216, 175),
    (233, 229, 160),
    (212, 237, 158),
    (193, 242, 179),
    (186, 242, 206),
    (187, 238, 237),
    (187, 186, 187),
    (0, 0, 0),
    (0, 0, 0)
]

# Standard palette from fceux
nes_fceux = [
    (116, 116, 116),
    (36, 24, 140),
    (0, 0, 168),
    (68, 0, 156),
    (140, 0, 116),
    (168, 0, 16),
    (164, 0, 0),
    (124, 8, 0),
    (64, 44, 0),
    (0, 68, 0),
    (0, 80, 0),
    (0, 60, 20),
    (24, 60, 92),
    (0, 0, 0),
    (0, 0, 0),
    (0, 0, 0),
    (188, 188, 188),
    (0, 112, 236),
    (32, 56, 236),
    (128, 0, 240),
    (188, 0, 188),
    (228, 0, 88),
    (216, 40, 0),
    (200, 76, 12),
    (136, 112, 0),
    (0, 148, 0),
    (0, 168, 0),
    (0, 144, 56),
    (0, 128, 136),
    (0, 0, 0),
    (0, 0, 0),
    (0, 0, 0),
    (252, 252, 252),
    (60, 188, 252),
    (92, 148, 252),
    (204, 136, 252),
    (244, 120, 252),
    (252, 116, 180),
    (252, 116, 96),
    (252, 152, 56),
    (240, 188, 60),
    (128, 208, 16),
    (76, 220, 72),
    (88, 248, 152),
    (0, 232, 216),
    (120, 120, 120),
    (0, 0, 0),
    (0, 0, 0),
    (252, 252, 252),
    (168, 228, 252),
    (196, 212, 252),
    (212, 200, 252),
    (252, 196, 252),
    (252, 196, 216),
    (252, 188, 176),
    (252, 216, 168),
    (252, 228, 160),
    (224, 252, 160),
    (168, 240, 188),
    (176, 252, 204),
    (156, 252, 240),
    (196, 196, 196),
    (0, 0, 0),
    (0, 0, 0)
    ]

# http: //pixeljoint.com/forum/forum_posts.asp?TID=12795
dawnbringer16 = [
    (20, 12, 28),
    (68, 36, 52),
    (48, 52, 109),
    (78, 74, 78),
    (133, 76, 48),
    (52, 101, 36),
    (208, 70, 72),
    (117, 113, 97),
    (89, 125, 206),
    (210, 125, 44),
    (133, 149, 161),
    (109, 170, 44),
    (210, 170, 153),
    (109, 194, 202),
    (218, 212, 94),
    (222, 238, 214)
]

c64 = [
    (0, 0, 0),
    (255, 255, 255),
    (136, 0, 0),
    (170, 255, 238),
    (204, 68, 204),
    (0, 204, 85),
    (0, 0, 170),
    (238, 238, 119),
    (221, 136, 85),
    (102, 68, 0),
    (255, 119, 119),
    (51, 51, 51),
    (119, 119, 119),
    (170, 255, 102),
    (0, 136, 255),
    (187, 187, 187)
]

ntsc = [
    (0, 0, 0),
    (26, 26, 26),
    (57, 57, 57),
    (91, 91, 91),
    (126, 126, 126),
    (162, 162, 162),
    (199, 199, 199),
    (237, 237, 237),
    (25, 2, 0),
    (58, 31, 0),
    (93, 65, 0),
    (130, 100, 0),
    (167, 136, 0),
    (204, 173, 0),
    (242, 210, 25),
    (254, 250, 64),
    (55, 0, 0),
    (94, 8, 0),
    (131, 39, 0),
    (169, 73, 0),
    (207, 108, 0),
    (245, 143, 23),
    (254, 180, 56),
    (254, 223, 111),
    (71, 0, 0),
    (115, 0, 0),
    (152, 19, 0),
    (190, 50, 22),
    (228, 83, 53),
    (254, 118, 87),
    (254, 156, 129),
    (254, 198, 187),
    (68, 0, 8),
    (111, 0, 31),
    (150, 6, 64),
    (187, 36, 98),
    (225, 69, 133),
    (254, 103, 170),
    (254, 140, 214),
    (254, 183, 246),
    (45, 0, 74),
    (87, 0, 103),
    (125, 5, 140),
    (161, 34, 177),
    (199, 67, 215),
    (237, 101, 254),
    (254, 138, 246),
    (254, 181, 247),
    (13, 0, 130),
    (51, 0, 162),
    (85, 15, 201),
    (120, 45, 240),
    (156, 78, 254),
    (195, 114, 254),
    (235, 152, 254),
    (254, 192, 249),
    (0, 0, 145),
    (10, 5, 189),
    (40, 34, 228),
    (72, 66, 254),
    (107, 100, 254),
    (144, 138, 254),
    (183, 176, 254),
    (223, 216, 254),
    (0, 0, 114),
    (0, 28, 171),
    (3, 60, 214),
    (32, 94, 253),
    (64, 129, 254),
    (100, 166, 254),
    (137, 206, 254),
    (176, 246, 254),
    (0, 16, 58),
    (0, 49, 110),
    (0, 85, 162),
    (5, 121, 200),
    (35, 157, 238),
    (68, 194, 254),
    (104, 233, 254),
    (143, 254, 254),
    (0, 31, 2),
    (0, 67, 38),
    (0, 105, 87),
    (0, 141, 122),
    (27, 177, 158),
    (59, 215, 195),
    (93, 254, 233),
    (134, 254, 254),
    (0, 36, 3),
    (0, 74, 5),
    (0, 112, 12),
    (9, 149, 43),
    (40, 186, 76),
    (73, 224, 110),
    (108, 254, 146),
    (151, 254, 181),
    (0, 33, 2),
    (0, 70, 4),
    (8, 107, 0),
    (40, 144, 0),
    (73, 181, 9),
    (107, 219, 40),
    (143, 254, 73),
    (187, 254, 105),
    (0, 21, 1),
    (16, 54, 0),
    (48, 89, 0),
    (83, 126, 0),
    (118, 163, 0),
    (154, 200, 0),
    (191, 238, 30),
    (232, 254, 62),
    (26, 2, 0),
    (59, 31, 0),
    (94, 65, 0),
    (131, 100, 0),
    (168, 136, 0),
    (206, 173, 0),
    (244, 210, 24),
    (254, 250, 64),
    (56, 0, 0),
    (95, 8, 0),
    (132, 39, 0),
    (170, 73, 0),
    (208, 107, 0),
    (246, 143, 24),
    (254, 180, 57),
    (254, 223, 112)
]

pal = [
    (0, 0, 0),
    (26, 26, 26),
    (57, 57, 57),
    (91, 91, 91),
    (126, 126, 126),
    (162, 162, 162),
    (199, 199, 199),
    (237, 237, 237),
    (0, 0, 0),
    (26, 26, 26),
    (57, 57, 57),
    (91, 91, 91),
    (126, 126, 126),
    (162, 162, 162),
    (199, 199, 199),
    (237, 237, 237),
    (30, 0, 0),
    (63, 28, 0),
    (99, 61, 0),
    (136, 96, 0),
    (173, 131, 0),
    (210, 168, 6),
    (249, 205, 38),
    (254, 246, 74),
    (0, 33, 0),
    (0, 70, 0),
    (13, 106, 0),
    (45, 144, 0),
    (79, 181, 0),
    (113, 218, 6),
    (149, 254, 38),
    (192, 254, 77),
    (58, 0, 0),
    (98, 6, 0),
    (136, 37, 0),
    (173, 69, 0),
    (210, 103, 27),
    (249, 139, 59),
    (254, 176, 94),
    (254, 219, 135),
    (0, 37, 0),
    (0, 75, 0),
    (0, 114, 0),
    (13, 150, 0),
    (44, 187, 28),
    (78, 225, 61),
    (112, 254, 95),
    (156, 254, 138),
    (71, 0, 0),
    (114, 0, 7),
    (151, 15, 37),
    (189, 46, 69),
    (227, 79, 104),
    (254, 114, 139),
    (254, 152, 178),
    (254, 194, 221),
    (0, 33, 0),
    (0, 69, 5),
    (0, 108, 38),
    (0, 144, 70),
    (28, 181, 105),
    (61, 219, 140),
    (95, 254, 177),
    (136, 254, 221),
    (65, 0, 38),
    (108, 0, 79),
    (146, 4, 115),
    (184, 34, 152),
    (222, 67, 189),
    (254, 101, 227),
    (254, 138, 254),
    (254, 182, 254),
    (0, 17, 42),
    (0, 52, 79),
    (0, 89, 117),
    (4, 124, 154),
    (34, 160, 191),
    (67, 197, 229),
    (101, 235, 254),
    (140, 254, 254),
    (42, 0, 101),
    (83, 0, 146),
    (120, 4, 185),
    (156, 34, 224),
    (194, 66, 254),
    (232, 101, 254),
    (254, 138, 254),
    (254, 182, 254),
    (0, 0, 107),
    (0, 31, 148),
    (0, 64, 188),
    (29, 98, 226),
    (61, 133, 254),
    (95, 169, 254),
    (132, 209, 254),
    (171, 249, 254),
    (8, 0, 142),
    (45, 0, 188),
    (78, 16, 228),
    (113, 47, 254),
    (149, 80, 254),
    (187, 117, 254),
    (227, 155, 254),
    (254, 194, 254),
    (0, 0, 144),
    (6, 8, 189),
    (36, 37, 228),
    (68, 69, 254),
    (102, 103, 254),
    (139, 141, 254),
    (178, 179, 254),
    (218, 219, 254),
    (0, 0, 0),
    (26, 26, 26),
    (57, 57, 57),
    (91, 91, 91),
    (126, 126, 126),
    (162, 162, 162),
    (199, 199, 199),
    (237, 237, 237),
    (0, 0, 0),
    (26, 26, 26),
    (57, 57, 57),
    (91, 91, 91),
    (126, 126, 126),
    (162, 162, 162),
    (199, 199, 199),
    (237, 237, 237)
]

sam = [
    (0, 0, 0),
    (0, 0, 73),
    (73, 0, 0),
    (73, 0, 73),
    (0, 73, 0),
    (0, 73, 73),
    (73, 73, 0),
    (73, 73, 73),
    (36, 36, 36),
    (36, 36, 109),
    (109, 36, 36),
    (109, 36, 109),
    (36, 109, 36),
    (36, 109, 109),
    (109, 109, 36),
    (109, 109, 109),
    (0, 0, 146),
    (0, 0, 219),
    (73, 0, 146),
    (73, 0, 219),
    (0, 73, 146),
    (0, 73, 219),
    (73, 73, 146),
    (73, 73, 219),
    (36, 36, 182),
    (36, 36, 255),
    (109, 36, 182),
    (109, 36, 255),
    (36, 109, 182),
    (36, 109, 255),
    (109, 109, 182),
    (109, 109, 255),
    (146, 0, 0),
    (146, 0, 73),
    (219, 0, 0),
    (219, 0, 73),
    (146, 73, 0),
    (146, 73, 73),
    (219, 73, 0),
    (219, 73, 73),
    (182, 36, 36),
    (182, 36, 109),
    (255, 36, 36),
    (255, 36, 109),
    (182, 109, 36),
    (182, 109, 109),
    (255, 109, 36),
    (255, 109, 109),
    (146, 0, 146),
    (146, 0, 219),
    (219, 0, 146),
    (219, 0, 219),
    (146, 73, 146),
    (146, 73, 219),
    (219, 73, 146),
    (219, 73, 219),
    (182, 36, 182),
    (182, 36, 255),
    (255, 36, 182),
    (255, 36, 255),
    (182, 109, 182),
    (182, 109, 255),
    (255, 109, 182),
    (255, 109, 255),
    (0, 146, 0),
    (0, 146, 73),
    (73, 146, 0),
    (73, 146, 73),
    (0, 219, 0),
    (0, 219, 73),
    (73, 219, 0),
    (73, 219, 73),
    (36, 182, 36),
    (36, 182, 109),
    (109, 182, 36),
    (109, 182, 109),
    (36, 255, 36),
    (36, 255, 109),
    (109, 255, 36),
    (109, 255, 109),
    (0, 146, 146),
    (0, 146, 219),
    (73, 146, 146),
    (73, 146, 219),
    (0, 219, 146),
    (0, 219, 219),
    (73, 219, 146),
    (73, 219, 219),
    (36, 182, 182),
    (36, 182, 255),
    (109, 182, 182),
    (109, 182, 255),
    (36, 255, 182),
    (36, 255, 255),
    (109, 255, 182),
    (109, 255, 255),
    (146, 146, 0),
    (146, 146, 73),
    (219, 146, 0),
    (219, 146, 73),
    (146, 219, 0),
    (146, 219, 73),
    (219, 219, 0),
    (219, 219, 73),
    (182, 182, 36),
    (182, 182, 109),
    (255, 182, 36),
    (255, 182, 109),
    (182, 255, 36),
    (182, 255, 109),
    (255, 255, 36),
    (255, 255, 109),
    (146, 146, 146),
    (146, 146, 219),
    (219, 146, 146),
    (219, 146, 219),
    (146, 219, 146),
    (146, 219, 219),
    (219, 219, 146),
    (219, 219, 219),
    (182, 182, 182),
    (182, 182, 255),
    (255, 182, 182),
    (255, 182, 255),
    (182, 255, 182),
    (182, 255, 255),
    (255, 255, 182),
    (255, 255, 255)
]

appleii = [
    (0, 0, 0),
    (134, 59, 82),
    (80, 71, 137),
    (233, 93, 240),
    (0, 104, 82),
    (147, 147, 147),
    (0, 167, 240),
    (202, 194, 248),
    (80, 92, 15),
    (235, 127, 35),
    (147, 147, 147),
    (246, 185, 202),
    (0, 201, 40),
    (203, 211, 155),
    (155, 220, 203),
    (255, 255, 255)
]

gameboy = [
    (15, 56, 15),
    (48, 98, 48),
    (139, 172, 15),
    (155, 188, 15)
]

blackwhite = [
    (0, 0, 0),
    (255, 255, 255)
]

cga = [
    (0, 0, 0),
    (0, 0, 170),
    (0, 170, 0),
    (0, 170, 170),
    (170, 0, 0),
    (170, 0, 170),
    (170, 85, 0),
    (170, 170, 170),
    (85, 85, 85),
    (85, 85, 255),
    (85, 255, 85),
    (85, 255, 255),
    (255, 85, 85),
    (255, 85, 255),
    (255, 255, 85),
    (255, 255, 255)
]

cga_palette0 = [
    (0, 0, 0),
    (0, 170, 0),
    (170, 0, 0),
    (170, 85, 0)
]

cga_palette0high = [
    (0, 0, 0),
    (85, 255, 85),
    (255, 85, 85),
    (255, 255, 85)
]

cga_palette1 = [
    (0, 0, 0),
    (0, 170, 170),
    (170, 0, 170),
    (170, 170, 170)
]

cga_palette1high = [
    (0, 0, 0),
    (85, 255, 255),
    (255, 85, 255),
    (255, 255, 255)
]

cga_palette3 = [
    (0, 0, 0),
    (0, 170, 170),
    (170, 0, 0),
    (170, 170, 170)
]

cga_palette3high = [
    (0, 0, 0),
    (85, 255, 255),
    (255, 85, 85),
    (255, 255, 255)
]

mastersystem = [
    (0, 0, 0),
    (85, 0, 0),
    (170, 0, 0),
    (255, 0, 0),
    (0, 85, 0),
    (85, 85, 0),
    (170, 85, 0),
    (255, 85, 0),
    (0, 170, 0),
    (85, 170, 0),
    (170, 170, 0),
    (255, 170, 0),
    (0, 255, 0),
    (85, 255, 0),
    (170, 255, 0),
    (255, 255, 0),
    (0, 0, 85),
    (85, 0, 85),
    (170, 0, 85),
    (255, 0, 85),
    (0, 85, 85),
    (85, 85, 85),
    (170, 85, 85),
    (255, 85, 85),
    (0, 170, 85),
    (85, 170, 85),
    (170, 170, 85),
    (255, 170, 85),
    (0, 255, 85),
    (85, 255, 85),
    (170, 255, 85),
    (255, 255, 85),
    (0, 0, 170),
    (85, 0, 170),
    (170, 0, 170),
    (255, 0, 170),
    (0, 85, 170),
    (85, 85, 170),
    (170, 85, 170),
    (255, 85, 170),
    (0, 170, 170),
    (85, 170, 170),
    (170, 170, 170),
    (255, 170, 170),
    (0, 255, 170),
    (85, 255, 170),
    (170, 255, 170),
    (255, 255, 170),
    (0, 0, 255),
    (85, 0, 255),
    (170, 0, 255),
    (255, 0, 255),
    (0, 85, 255),
    (85, 85, 255),
    (170, 85, 255),
    (255, 85, 255),
    (0, 170, 255),
    (85, 170, 255),
    (170, 170, 255),
    (255, 170, 255),
    (0, 255, 255),
    (85, 255, 255),
    (170, 255, 255),
    (255, 255, 255)
]


def lookup(table):
    return lambda byte: table[byte]

def lookup_wrap(table):
    """
    Index into color table, wrapping table values around to fit into the table
    """
    return lambda byte: table[byte % len(table)]

def lookup_clamp(table):
    """
    Index into color table, clamping values to table size
    """
    return lambda byte: table[min(max(0, byte), len(table))]

def mask(size, f):
    """
    Mask out everything except the first `size` bits
    """
    bitmask = pow(2, size) - 1
    return lambda byte: f(byte & bitmask)

def expand(fro, to, f):
    """
    Expand a `fro` bit number into a `to` bit number.
    
    For example:
    
    - Expanding from 8bit to 6bits maps four values of the input number
    to a single value of the palette

    - Exapnding from 6bits to 8bits maps each input value to every forth value of the palette.
    """
    mul = float(pow(2, to)) / pow(2, fro)
    return lambda byte: f(int(math.floor(byte * mul)))

def invert(size, f):
    """
    Bitwise not the input.
    """
    bitmask = pow(2, size) - 1
    return lambda byte: f(bitmask - byte)

def invert_output(f):
    """
    Invert the output color
    """
    return lambda byte: tuple(map(lambda x: 255 - x, f(byte)))

def truecolor(byte):
    """
    8 bit truecolor
    """
    return (
        (byte >> 5) * 32,
        ((byte & 0b00011100) >> 2) * 32,
        (byte & 0b00000011) * 64
    )

def luminance(byte):
    return (byte, byte, byte)

def rgb(intValue):
    """
    24 bit truecolor
    """
    return (
        (intValue >> 16) & 255,
        (intValue >> 8) & 255,
        (intValue) & 255
    )



def extractPalette(infile):
    import struct
    out = []
    with open(infile, "rb") as f:
        for _ in range(64):
            r = struct.unpack('B', f.read(1))[0]
            g = struct.unpack('B',f.read(1))[0]
            b = struct.unpack('B',f.read(1))[0]
            out.append((r, g, b))
    return out
